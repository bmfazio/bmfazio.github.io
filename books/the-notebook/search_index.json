[
["index.html", "The Book of Notes Preface", " The Book of Notes Boris Fazio 2019-06-11 Preface The idea for this notebook fully originated from seeing this https://lifes-work.netlify.com/ Nothing here is intended to make sense to anyone beyond myself. "],
["a-place-for-incomplete-matters.html", "Section 1 A place for incomplete matters 1.1 Finding a minimal theme 1.2 Remembering Hugo and blogdown 1.3 Finally, themes 1.4 Deployment 1.5 Hugo glossary/structure 1.6 Integrating bookdown with blogdown", " Section 1 A place for incomplete matters The unorganized-at-first but progressively-better-structured note taking that tends to characterize forays into new areas of knowledge is better placed in a notebook-type document rather than the blog I initially thought would suffice. Naturally, a blog still retains utility as a way of sharing better structured but still informal communication and posts map to the time domain, which serves as a digital memory of sorts. I wish to centralize all my online work under one single domain, so both the notebook and blog should be part of my site. Figuring out how to easily integrate this content with Hugo and an RStudio workflow is now the task at hand. 1.1 Finding a minimal theme In retrospect, the Blackburn theme, simple as it is, still feels bloated to me. I also have second thoughts about the lateral nav bar being the best choice. I think keeping it at the top and therefore out of sight unless the user explicitly wishes to see it is probably best when delivering content you want people to focus on. I remember that Yihui’s blogdown online book includes a minimal theme, and I could use with a refresher of the way Hugo works, so I’ll be taking a look at it again. 1.2 Remembering Hugo and blogdown From Yihui’s book, section 1.2: You have to know three most basic concepts for a Hugo-based website The configuration file config.toml The content directory (by default, content/) The publishing directory (by default, public/) It’s important to be on the look out for ways of making blogdown flexible, since I want to build a site that goes beyond the blog structure (and being able to manage everything from RStudio would make matters easier). Here’s one good tip from section 1.3, describing the “New Post” addin: As you type the title of the post, it will generate a filename for you, and you can edit it if you do not like the automatically generated one. In fact, you can also use this addin to create normal pages under any directories under content/. For example, if you want to add a resume page, you can change the filename to resume.md from the default post/YYYY-mm-dd-resume.md. Global options for blogdown, section 1.4: We recommend that you set these options in your R startup profile file. […] Suppose you always prefer writing Rmd posts (instead of the default *.md), and want the author of new posts to be “John Doe” by default. You can set these options in the profile file: options(blogdown.ext = &quot;.Rmd&quot;, blogdown.author = &quot;John Doe&quot;) On rendering R Markdown to HTML (section 1.5): You will have some intermediate HTML files in the source directory of your website, because blogdown has to call rmarkdown to pre-render *.Rmd files *.html. You will also have intermediate folders for figures (*_files/) and cache (*_cache/) if you have plot output in R code chunks or have enabled knitr’s caching. Unless you care a lot about the “cleanness” of the source repository of your website (especially when you use a version control tool like GIT), these intermediate files should not matter. Note that it says intermediate files. Therefore, I should take care to separate the published website from the repo with the “raw ingredients”. Also note: We have provided an output format function blogdown::html_page in blogdown, and all R Markdown files are rendered using this format. It is based on the output format bookdown::html_document2, which means it has inherited a lot of features from bookdown in addition to features in Pandoc. 1.3 Finally, themes In Hugo, themes control the entire appearance and functionality of your site. So Emphasis mine. Themes aren’t entirely contained in the /themes folder: We recommend that you [create a new site under another new directory and pass the GitHub repository name to the theme argument of new_site()], because Hugo themes could be very complicated and the usage of each theme can be very different and highly dependent on config.toml. If you install a theme using install_theme() instead of new_site() you’ll need to manually create the config.toml file in the root directory of your website to match the newly installed theme. # for example, create a new site with the academic theme blogdown::new_site(theme = &quot;gcushen/hugo-academic&quot;) And finally, the list of minimal themes. The two options I’m considering: XMin Tanka I’ve decided on Xmin because The main motivation for writing this theme was to provide a really minimal example to beginners of Hugo templates. This XMin theme contains about 130 lines of code in total, including the code in HTML templates and CSS (also counting empty lines). 1.4 Deployment Since the website is basically a folder containing static files, it is much easier to deploy than websites that require dynamic server-side languages such as PHP or databases. All you need is to upload the files to a server, and usually your website will be up and running shortly. 1.5 Hugo glossary/structure Front matter: YAML/TOML/JSON block at the top of markdown file that contains a page’s metadata Taxonomies: helps organize pages category and tag are included by default (more can be defined in config.toml) Templates: HTML skeletons found in layouts/ List page: by default, the _index.html page in content/ or a subfolder, uses the theme’s _default/list.html template Shortcodes, Sections Working with list pages to show items categorized by subfolders https://discourse.gohugo.io/t/listing-nested-directories/7198/1 Also, a very relevant quote I fully identify with: One thing I have noticed is grasping how Hugo is designed to work by overriding rather than editing files- I think understanding the underlying file structure at first is hard. https://community.rstudio.com/t/what-is-hard-about-blogdown/8108 Some Hugo magic: https://regisphilibert.com/blog/2018/02/hugo-the-scope-the-context-and-the-dot/ 1.6 Integrating bookdown with blogdown My question on the RStudio forums got no answers after a weeks, so I started experimenting. My initial idea was to place the raw bookdown inputs into content/resources/ and build those together with the site, but that’s actually probably a bad idea since I would have needed to figure out just how to do that and building the book is already something one does while editing it, so it’s not like it would save a massive amount of time. I decided to directly place the bookdown output in that same directory instead, but blogdown was only importing the index.html file and ignoring the rest of sections for some reason. Instead of figuring that one out, I discovered that the static folder is bundled as-is when the site builds. So that solved getting the books working with the rest of the site’s workflow. Further refinements that I’ve thought about are: automatically creating the list of books in the Resources section by using an R code block that looks at the stuff inside static as the site builds, and using symbolic links to a single libs folder that all the books share. The latter is highly unnecessary since the folder isn’t very big and I doubt I’ll ever have that many books that it becomes a problem, but it provided an opportunity to learn about symbolic links on Windows and their interaction with Git… testing whether they clone nicely into a Linux machine is pending (also, must figure out how to use system to automate that part of the process). Some code I’m working on to do the listing thing: library(dplyr) library(rvest) blogdown:::site_root() %&gt;% paste0(&quot;/static/books&quot;) %&gt;% list.files(pattern = &quot;^index.html&quot;, recursive = T, full.names = T) %&gt;% sapply(function(x)read_html(x) %&gt;% html_nodes(&quot;title&quot;) %&gt;% html_text()) "],
["bookdown-tools.html", "Bookdown tools", " Bookdown tools https://github.com/hebrewseniorlife/bookdownThemeEditor "],
["epibiostat-resources.html", "Epibiostat resources", " Epibiostat resources I expect this section will eventually make its way into a book of its own. Stepwise bad ? https://livefreeordichotomize.com/2019/06/04/using_awk_and_r_to_parse_25tb/ https://twitter.com/Sean_Harrison2/status/1136000721571188737 https://github.com/navdeep-G/sdss-2019/blob/master/presentation/sdss_rsparkling_mli_2019.pdf Bootstrap + baayesian stuff https://twitter.com/economeager/status/1134481583975673856 Causalidad: https://twitter.com/analisereal/status/1113828490019622913 "],
["vidulls.html", "Section 2 Vidulls 2.1 Creation tools 2.2 Egg cooking simulator 2.3 Tile Trapper 2.4 Run-On", " Section 2 Vidulls 2.1 Creation tools http://inform7.com/ 2.2 Egg cooking simulator Inspiration - Every Way to Cook an Egg https://en.wikipedia.org/wiki/Large_eddy_simulation https://pages.nist.gov/fds-smv/ https://github.com/firemodels/fds 2.3 Tile Trapper Hunter (active character-based combat) Builder (tower defense style) Ambusher (combine traps with key character intervention) 2.4 Run-On A lost astronaut A concerned citizen A perceptive hunter Bear shotgun, bear spray, bear trap https://en.wikipedia.org/wiki/TP-82_Cosmonaut_survival_pistol https://en.wikipedia.org/wiki/Bear_spray The trap actually releases bears A full melee wrestler that can bear hug and suplex from the skies "]
]
